package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/Nikscorp/soap/internal/app/lazysoap.tvMetaClient -o ./mocks/tv_meta_client_mock.go -n TvMetaClientMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/Nikscorp/soap/internal/pkg/tvmeta"
	"github.com/gojuno/minimock/v3"
)

// TvMetaClientMock implements lazysoap.tvMetaClient
type TvMetaClientMock struct {
	t minimock.Tester

	funcSearchTVShows          func(ctx context.Context, query string) (tp1 *tvmeta.TVShows, err error)
	inspectFuncSearchTVShows   func(ctx context.Context, query string)
	afterSearchTVShowsCounter  uint64
	beforeSearchTVShowsCounter uint64
	SearchTVShowsMock          mTvMetaClientMockSearchTVShows

	funcTVShowAllSeasonsWithDetails          func(ctx context.Context, id int, language string) (ap1 *tvmeta.AllSeasonsWithDetails, err error)
	inspectFuncTVShowAllSeasonsWithDetails   func(ctx context.Context, id int, language string)
	afterTVShowAllSeasonsWithDetailsCounter  uint64
	beforeTVShowAllSeasonsWithDetailsCounter uint64
	TVShowAllSeasonsWithDetailsMock          mTvMetaClientMockTVShowAllSeasonsWithDetails
}

// NewTvMetaClientMock returns a mock for lazysoap.tvMetaClient
func NewTvMetaClientMock(t minimock.Tester) *TvMetaClientMock {
	m := &TvMetaClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SearchTVShowsMock = mTvMetaClientMockSearchTVShows{mock: m}
	m.SearchTVShowsMock.callArgs = []*TvMetaClientMockSearchTVShowsParams{}

	m.TVShowAllSeasonsWithDetailsMock = mTvMetaClientMockTVShowAllSeasonsWithDetails{mock: m}
	m.TVShowAllSeasonsWithDetailsMock.callArgs = []*TvMetaClientMockTVShowAllSeasonsWithDetailsParams{}

	return m
}

type mTvMetaClientMockSearchTVShows struct {
	mock               *TvMetaClientMock
	defaultExpectation *TvMetaClientMockSearchTVShowsExpectation
	expectations       []*TvMetaClientMockSearchTVShowsExpectation

	callArgs []*TvMetaClientMockSearchTVShowsParams
	mutex    sync.RWMutex
}

// TvMetaClientMockSearchTVShowsExpectation specifies expectation struct of the tvMetaClient.SearchTVShows
type TvMetaClientMockSearchTVShowsExpectation struct {
	mock    *TvMetaClientMock
	params  *TvMetaClientMockSearchTVShowsParams
	results *TvMetaClientMockSearchTVShowsResults
	Counter uint64
}

// TvMetaClientMockSearchTVShowsParams contains parameters of the tvMetaClient.SearchTVShows
type TvMetaClientMockSearchTVShowsParams struct {
	ctx   context.Context
	query string
}

// TvMetaClientMockSearchTVShowsResults contains results of the tvMetaClient.SearchTVShows
type TvMetaClientMockSearchTVShowsResults struct {
	tp1 *tvmeta.TVShows
	err error
}

// Expect sets up expected params for tvMetaClient.SearchTVShows
func (mmSearchTVShows *mTvMetaClientMockSearchTVShows) Expect(ctx context.Context, query string) *mTvMetaClientMockSearchTVShows {
	if mmSearchTVShows.mock.funcSearchTVShows != nil {
		mmSearchTVShows.mock.t.Fatalf("TvMetaClientMock.SearchTVShows mock is already set by Set")
	}

	if mmSearchTVShows.defaultExpectation == nil {
		mmSearchTVShows.defaultExpectation = &TvMetaClientMockSearchTVShowsExpectation{}
	}

	mmSearchTVShows.defaultExpectation.params = &TvMetaClientMockSearchTVShowsParams{ctx, query}
	for _, e := range mmSearchTVShows.expectations {
		if minimock.Equal(e.params, mmSearchTVShows.defaultExpectation.params) {
			mmSearchTVShows.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSearchTVShows.defaultExpectation.params)
		}
	}

	return mmSearchTVShows
}

// Inspect accepts an inspector function that has same arguments as the tvMetaClient.SearchTVShows
func (mmSearchTVShows *mTvMetaClientMockSearchTVShows) Inspect(f func(ctx context.Context, query string)) *mTvMetaClientMockSearchTVShows {
	if mmSearchTVShows.mock.inspectFuncSearchTVShows != nil {
		mmSearchTVShows.mock.t.Fatalf("Inspect function is already set for TvMetaClientMock.SearchTVShows")
	}

	mmSearchTVShows.mock.inspectFuncSearchTVShows = f

	return mmSearchTVShows
}

// Return sets up results that will be returned by tvMetaClient.SearchTVShows
func (mmSearchTVShows *mTvMetaClientMockSearchTVShows) Return(tp1 *tvmeta.TVShows, err error) *TvMetaClientMock {
	if mmSearchTVShows.mock.funcSearchTVShows != nil {
		mmSearchTVShows.mock.t.Fatalf("TvMetaClientMock.SearchTVShows mock is already set by Set")
	}

	if mmSearchTVShows.defaultExpectation == nil {
		mmSearchTVShows.defaultExpectation = &TvMetaClientMockSearchTVShowsExpectation{mock: mmSearchTVShows.mock}
	}
	mmSearchTVShows.defaultExpectation.results = &TvMetaClientMockSearchTVShowsResults{tp1, err}
	return mmSearchTVShows.mock
}

// Set uses given function f to mock the tvMetaClient.SearchTVShows method
func (mmSearchTVShows *mTvMetaClientMockSearchTVShows) Set(f func(ctx context.Context, query string) (tp1 *tvmeta.TVShows, err error)) *TvMetaClientMock {
	if mmSearchTVShows.defaultExpectation != nil {
		mmSearchTVShows.mock.t.Fatalf("Default expectation is already set for the tvMetaClient.SearchTVShows method")
	}

	if len(mmSearchTVShows.expectations) > 0 {
		mmSearchTVShows.mock.t.Fatalf("Some expectations are already set for the tvMetaClient.SearchTVShows method")
	}

	mmSearchTVShows.mock.funcSearchTVShows = f
	return mmSearchTVShows.mock
}

// When sets expectation for the tvMetaClient.SearchTVShows which will trigger the result defined by the following
// Then helper
func (mmSearchTVShows *mTvMetaClientMockSearchTVShows) When(ctx context.Context, query string) *TvMetaClientMockSearchTVShowsExpectation {
	if mmSearchTVShows.mock.funcSearchTVShows != nil {
		mmSearchTVShows.mock.t.Fatalf("TvMetaClientMock.SearchTVShows mock is already set by Set")
	}

	expectation := &TvMetaClientMockSearchTVShowsExpectation{
		mock:   mmSearchTVShows.mock,
		params: &TvMetaClientMockSearchTVShowsParams{ctx, query},
	}
	mmSearchTVShows.expectations = append(mmSearchTVShows.expectations, expectation)
	return expectation
}

// Then sets up tvMetaClient.SearchTVShows return parameters for the expectation previously defined by the When method
func (e *TvMetaClientMockSearchTVShowsExpectation) Then(tp1 *tvmeta.TVShows, err error) *TvMetaClientMock {
	e.results = &TvMetaClientMockSearchTVShowsResults{tp1, err}
	return e.mock
}

// SearchTVShows implements lazysoap.tvMetaClient
func (mmSearchTVShows *TvMetaClientMock) SearchTVShows(ctx context.Context, query string) (tp1 *tvmeta.TVShows, err error) {
	mm_atomic.AddUint64(&mmSearchTVShows.beforeSearchTVShowsCounter, 1)
	defer mm_atomic.AddUint64(&mmSearchTVShows.afterSearchTVShowsCounter, 1)

	if mmSearchTVShows.inspectFuncSearchTVShows != nil {
		mmSearchTVShows.inspectFuncSearchTVShows(ctx, query)
	}

	mm_params := &TvMetaClientMockSearchTVShowsParams{ctx, query}

	// Record call args
	mmSearchTVShows.SearchTVShowsMock.mutex.Lock()
	mmSearchTVShows.SearchTVShowsMock.callArgs = append(mmSearchTVShows.SearchTVShowsMock.callArgs, mm_params)
	mmSearchTVShows.SearchTVShowsMock.mutex.Unlock()

	for _, e := range mmSearchTVShows.SearchTVShowsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.tp1, e.results.err
		}
	}

	if mmSearchTVShows.SearchTVShowsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSearchTVShows.SearchTVShowsMock.defaultExpectation.Counter, 1)
		mm_want := mmSearchTVShows.SearchTVShowsMock.defaultExpectation.params
		mm_got := TvMetaClientMockSearchTVShowsParams{ctx, query}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSearchTVShows.t.Errorf("TvMetaClientMock.SearchTVShows got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSearchTVShows.SearchTVShowsMock.defaultExpectation.results
		if mm_results == nil {
			mmSearchTVShows.t.Fatal("No results are set for the TvMetaClientMock.SearchTVShows")
		}
		return (*mm_results).tp1, (*mm_results).err
	}
	if mmSearchTVShows.funcSearchTVShows != nil {
		return mmSearchTVShows.funcSearchTVShows(ctx, query)
	}
	mmSearchTVShows.t.Fatalf("Unexpected call to TvMetaClientMock.SearchTVShows. %v %v", ctx, query)
	return
}

// SearchTVShowsAfterCounter returns a count of finished TvMetaClientMock.SearchTVShows invocations
func (mmSearchTVShows *TvMetaClientMock) SearchTVShowsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSearchTVShows.afterSearchTVShowsCounter)
}

// SearchTVShowsBeforeCounter returns a count of TvMetaClientMock.SearchTVShows invocations
func (mmSearchTVShows *TvMetaClientMock) SearchTVShowsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSearchTVShows.beforeSearchTVShowsCounter)
}

// Calls returns a list of arguments used in each call to TvMetaClientMock.SearchTVShows.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSearchTVShows *mTvMetaClientMockSearchTVShows) Calls() []*TvMetaClientMockSearchTVShowsParams {
	mmSearchTVShows.mutex.RLock()

	argCopy := make([]*TvMetaClientMockSearchTVShowsParams, len(mmSearchTVShows.callArgs))
	copy(argCopy, mmSearchTVShows.callArgs)

	mmSearchTVShows.mutex.RUnlock()

	return argCopy
}

// MinimockSearchTVShowsDone returns true if the count of the SearchTVShows invocations corresponds
// the number of defined expectations
func (m *TvMetaClientMock) MinimockSearchTVShowsDone() bool {
	for _, e := range m.SearchTVShowsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SearchTVShowsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSearchTVShowsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSearchTVShows != nil && mm_atomic.LoadUint64(&m.afterSearchTVShowsCounter) < 1 {
		return false
	}
	return true
}

// MinimockSearchTVShowsInspect logs each unmet expectation
func (m *TvMetaClientMock) MinimockSearchTVShowsInspect() {
	for _, e := range m.SearchTVShowsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TvMetaClientMock.SearchTVShows with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SearchTVShowsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSearchTVShowsCounter) < 1 {
		if m.SearchTVShowsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TvMetaClientMock.SearchTVShows")
		} else {
			m.t.Errorf("Expected call to TvMetaClientMock.SearchTVShows with params: %#v", *m.SearchTVShowsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSearchTVShows != nil && mm_atomic.LoadUint64(&m.afterSearchTVShowsCounter) < 1 {
		m.t.Error("Expected call to TvMetaClientMock.SearchTVShows")
	}
}

type mTvMetaClientMockTVShowAllSeasonsWithDetails struct {
	mock               *TvMetaClientMock
	defaultExpectation *TvMetaClientMockTVShowAllSeasonsWithDetailsExpectation
	expectations       []*TvMetaClientMockTVShowAllSeasonsWithDetailsExpectation

	callArgs []*TvMetaClientMockTVShowAllSeasonsWithDetailsParams
	mutex    sync.RWMutex
}

// TvMetaClientMockTVShowAllSeasonsWithDetailsExpectation specifies expectation struct of the tvMetaClient.TVShowAllSeasonsWithDetails
type TvMetaClientMockTVShowAllSeasonsWithDetailsExpectation struct {
	mock    *TvMetaClientMock
	params  *TvMetaClientMockTVShowAllSeasonsWithDetailsParams
	results *TvMetaClientMockTVShowAllSeasonsWithDetailsResults
	Counter uint64
}

// TvMetaClientMockTVShowAllSeasonsWithDetailsParams contains parameters of the tvMetaClient.TVShowAllSeasonsWithDetails
type TvMetaClientMockTVShowAllSeasonsWithDetailsParams struct {
	ctx      context.Context
	id       int
	language string
}

// TvMetaClientMockTVShowAllSeasonsWithDetailsResults contains results of the tvMetaClient.TVShowAllSeasonsWithDetails
type TvMetaClientMockTVShowAllSeasonsWithDetailsResults struct {
	ap1 *tvmeta.AllSeasonsWithDetails
	err error
}

// Expect sets up expected params for tvMetaClient.TVShowAllSeasonsWithDetails
func (mmTVShowAllSeasonsWithDetails *mTvMetaClientMockTVShowAllSeasonsWithDetails) Expect(ctx context.Context, id int, language string) *mTvMetaClientMockTVShowAllSeasonsWithDetails {
	if mmTVShowAllSeasonsWithDetails.mock.funcTVShowAllSeasonsWithDetails != nil {
		mmTVShowAllSeasonsWithDetails.mock.t.Fatalf("TvMetaClientMock.TVShowAllSeasonsWithDetails mock is already set by Set")
	}

	if mmTVShowAllSeasonsWithDetails.defaultExpectation == nil {
		mmTVShowAllSeasonsWithDetails.defaultExpectation = &TvMetaClientMockTVShowAllSeasonsWithDetailsExpectation{}
	}

	mmTVShowAllSeasonsWithDetails.defaultExpectation.params = &TvMetaClientMockTVShowAllSeasonsWithDetailsParams{ctx, id, language}
	for _, e := range mmTVShowAllSeasonsWithDetails.expectations {
		if minimock.Equal(e.params, mmTVShowAllSeasonsWithDetails.defaultExpectation.params) {
			mmTVShowAllSeasonsWithDetails.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTVShowAllSeasonsWithDetails.defaultExpectation.params)
		}
	}

	return mmTVShowAllSeasonsWithDetails
}

// Inspect accepts an inspector function that has same arguments as the tvMetaClient.TVShowAllSeasonsWithDetails
func (mmTVShowAllSeasonsWithDetails *mTvMetaClientMockTVShowAllSeasonsWithDetails) Inspect(f func(ctx context.Context, id int, language string)) *mTvMetaClientMockTVShowAllSeasonsWithDetails {
	if mmTVShowAllSeasonsWithDetails.mock.inspectFuncTVShowAllSeasonsWithDetails != nil {
		mmTVShowAllSeasonsWithDetails.mock.t.Fatalf("Inspect function is already set for TvMetaClientMock.TVShowAllSeasonsWithDetails")
	}

	mmTVShowAllSeasonsWithDetails.mock.inspectFuncTVShowAllSeasonsWithDetails = f

	return mmTVShowAllSeasonsWithDetails
}

// Return sets up results that will be returned by tvMetaClient.TVShowAllSeasonsWithDetails
func (mmTVShowAllSeasonsWithDetails *mTvMetaClientMockTVShowAllSeasonsWithDetails) Return(ap1 *tvmeta.AllSeasonsWithDetails, err error) *TvMetaClientMock {
	if mmTVShowAllSeasonsWithDetails.mock.funcTVShowAllSeasonsWithDetails != nil {
		mmTVShowAllSeasonsWithDetails.mock.t.Fatalf("TvMetaClientMock.TVShowAllSeasonsWithDetails mock is already set by Set")
	}

	if mmTVShowAllSeasonsWithDetails.defaultExpectation == nil {
		mmTVShowAllSeasonsWithDetails.defaultExpectation = &TvMetaClientMockTVShowAllSeasonsWithDetailsExpectation{mock: mmTVShowAllSeasonsWithDetails.mock}
	}
	mmTVShowAllSeasonsWithDetails.defaultExpectation.results = &TvMetaClientMockTVShowAllSeasonsWithDetailsResults{ap1, err}
	return mmTVShowAllSeasonsWithDetails.mock
}

// Set uses given function f to mock the tvMetaClient.TVShowAllSeasonsWithDetails method
func (mmTVShowAllSeasonsWithDetails *mTvMetaClientMockTVShowAllSeasonsWithDetails) Set(f func(ctx context.Context, id int, language string) (ap1 *tvmeta.AllSeasonsWithDetails, err error)) *TvMetaClientMock {
	if mmTVShowAllSeasonsWithDetails.defaultExpectation != nil {
		mmTVShowAllSeasonsWithDetails.mock.t.Fatalf("Default expectation is already set for the tvMetaClient.TVShowAllSeasonsWithDetails method")
	}

	if len(mmTVShowAllSeasonsWithDetails.expectations) > 0 {
		mmTVShowAllSeasonsWithDetails.mock.t.Fatalf("Some expectations are already set for the tvMetaClient.TVShowAllSeasonsWithDetails method")
	}

	mmTVShowAllSeasonsWithDetails.mock.funcTVShowAllSeasonsWithDetails = f
	return mmTVShowAllSeasonsWithDetails.mock
}

// When sets expectation for the tvMetaClient.TVShowAllSeasonsWithDetails which will trigger the result defined by the following
// Then helper
func (mmTVShowAllSeasonsWithDetails *mTvMetaClientMockTVShowAllSeasonsWithDetails) When(ctx context.Context, id int, language string) *TvMetaClientMockTVShowAllSeasonsWithDetailsExpectation {
	if mmTVShowAllSeasonsWithDetails.mock.funcTVShowAllSeasonsWithDetails != nil {
		mmTVShowAllSeasonsWithDetails.mock.t.Fatalf("TvMetaClientMock.TVShowAllSeasonsWithDetails mock is already set by Set")
	}

	expectation := &TvMetaClientMockTVShowAllSeasonsWithDetailsExpectation{
		mock:   mmTVShowAllSeasonsWithDetails.mock,
		params: &TvMetaClientMockTVShowAllSeasonsWithDetailsParams{ctx, id, language},
	}
	mmTVShowAllSeasonsWithDetails.expectations = append(mmTVShowAllSeasonsWithDetails.expectations, expectation)
	return expectation
}

// Then sets up tvMetaClient.TVShowAllSeasonsWithDetails return parameters for the expectation previously defined by the When method
func (e *TvMetaClientMockTVShowAllSeasonsWithDetailsExpectation) Then(ap1 *tvmeta.AllSeasonsWithDetails, err error) *TvMetaClientMock {
	e.results = &TvMetaClientMockTVShowAllSeasonsWithDetailsResults{ap1, err}
	return e.mock
}

// TVShowAllSeasonsWithDetails implements lazysoap.tvMetaClient
func (mmTVShowAllSeasonsWithDetails *TvMetaClientMock) TVShowAllSeasonsWithDetails(ctx context.Context, id int, language string) (ap1 *tvmeta.AllSeasonsWithDetails, err error) {
	mm_atomic.AddUint64(&mmTVShowAllSeasonsWithDetails.beforeTVShowAllSeasonsWithDetailsCounter, 1)
	defer mm_atomic.AddUint64(&mmTVShowAllSeasonsWithDetails.afterTVShowAllSeasonsWithDetailsCounter, 1)

	if mmTVShowAllSeasonsWithDetails.inspectFuncTVShowAllSeasonsWithDetails != nil {
		mmTVShowAllSeasonsWithDetails.inspectFuncTVShowAllSeasonsWithDetails(ctx, id, language)
	}

	mm_params := &TvMetaClientMockTVShowAllSeasonsWithDetailsParams{ctx, id, language}

	// Record call args
	mmTVShowAllSeasonsWithDetails.TVShowAllSeasonsWithDetailsMock.mutex.Lock()
	mmTVShowAllSeasonsWithDetails.TVShowAllSeasonsWithDetailsMock.callArgs = append(mmTVShowAllSeasonsWithDetails.TVShowAllSeasonsWithDetailsMock.callArgs, mm_params)
	mmTVShowAllSeasonsWithDetails.TVShowAllSeasonsWithDetailsMock.mutex.Unlock()

	for _, e := range mmTVShowAllSeasonsWithDetails.TVShowAllSeasonsWithDetailsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ap1, e.results.err
		}
	}

	if mmTVShowAllSeasonsWithDetails.TVShowAllSeasonsWithDetailsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTVShowAllSeasonsWithDetails.TVShowAllSeasonsWithDetailsMock.defaultExpectation.Counter, 1)
		mm_want := mmTVShowAllSeasonsWithDetails.TVShowAllSeasonsWithDetailsMock.defaultExpectation.params
		mm_got := TvMetaClientMockTVShowAllSeasonsWithDetailsParams{ctx, id, language}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTVShowAllSeasonsWithDetails.t.Errorf("TvMetaClientMock.TVShowAllSeasonsWithDetails got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTVShowAllSeasonsWithDetails.TVShowAllSeasonsWithDetailsMock.defaultExpectation.results
		if mm_results == nil {
			mmTVShowAllSeasonsWithDetails.t.Fatal("No results are set for the TvMetaClientMock.TVShowAllSeasonsWithDetails")
		}
		return (*mm_results).ap1, (*mm_results).err
	}
	if mmTVShowAllSeasonsWithDetails.funcTVShowAllSeasonsWithDetails != nil {
		return mmTVShowAllSeasonsWithDetails.funcTVShowAllSeasonsWithDetails(ctx, id, language)
	}
	mmTVShowAllSeasonsWithDetails.t.Fatalf("Unexpected call to TvMetaClientMock.TVShowAllSeasonsWithDetails. %v %v %v", ctx, id, language)
	return
}

// TVShowAllSeasonsWithDetailsAfterCounter returns a count of finished TvMetaClientMock.TVShowAllSeasonsWithDetails invocations
func (mmTVShowAllSeasonsWithDetails *TvMetaClientMock) TVShowAllSeasonsWithDetailsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTVShowAllSeasonsWithDetails.afterTVShowAllSeasonsWithDetailsCounter)
}

// TVShowAllSeasonsWithDetailsBeforeCounter returns a count of TvMetaClientMock.TVShowAllSeasonsWithDetails invocations
func (mmTVShowAllSeasonsWithDetails *TvMetaClientMock) TVShowAllSeasonsWithDetailsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTVShowAllSeasonsWithDetails.beforeTVShowAllSeasonsWithDetailsCounter)
}

// Calls returns a list of arguments used in each call to TvMetaClientMock.TVShowAllSeasonsWithDetails.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTVShowAllSeasonsWithDetails *mTvMetaClientMockTVShowAllSeasonsWithDetails) Calls() []*TvMetaClientMockTVShowAllSeasonsWithDetailsParams {
	mmTVShowAllSeasonsWithDetails.mutex.RLock()

	argCopy := make([]*TvMetaClientMockTVShowAllSeasonsWithDetailsParams, len(mmTVShowAllSeasonsWithDetails.callArgs))
	copy(argCopy, mmTVShowAllSeasonsWithDetails.callArgs)

	mmTVShowAllSeasonsWithDetails.mutex.RUnlock()

	return argCopy
}

// MinimockTVShowAllSeasonsWithDetailsDone returns true if the count of the TVShowAllSeasonsWithDetails invocations corresponds
// the number of defined expectations
func (m *TvMetaClientMock) MinimockTVShowAllSeasonsWithDetailsDone() bool {
	for _, e := range m.TVShowAllSeasonsWithDetailsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TVShowAllSeasonsWithDetailsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTVShowAllSeasonsWithDetailsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTVShowAllSeasonsWithDetails != nil && mm_atomic.LoadUint64(&m.afterTVShowAllSeasonsWithDetailsCounter) < 1 {
		return false
	}
	return true
}

// MinimockTVShowAllSeasonsWithDetailsInspect logs each unmet expectation
func (m *TvMetaClientMock) MinimockTVShowAllSeasonsWithDetailsInspect() {
	for _, e := range m.TVShowAllSeasonsWithDetailsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TvMetaClientMock.TVShowAllSeasonsWithDetails with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TVShowAllSeasonsWithDetailsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTVShowAllSeasonsWithDetailsCounter) < 1 {
		if m.TVShowAllSeasonsWithDetailsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TvMetaClientMock.TVShowAllSeasonsWithDetails")
		} else {
			m.t.Errorf("Expected call to TvMetaClientMock.TVShowAllSeasonsWithDetails with params: %#v", *m.TVShowAllSeasonsWithDetailsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTVShowAllSeasonsWithDetails != nil && mm_atomic.LoadUint64(&m.afterTVShowAllSeasonsWithDetailsCounter) < 1 {
		m.t.Error("Expected call to TvMetaClientMock.TVShowAllSeasonsWithDetails")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TvMetaClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockSearchTVShowsInspect()

		m.MinimockTVShowAllSeasonsWithDetailsInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TvMetaClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TvMetaClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSearchTVShowsDone() &&
		m.MinimockTVShowAllSeasonsWithDetailsDone()
}
