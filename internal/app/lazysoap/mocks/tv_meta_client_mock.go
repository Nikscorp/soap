package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/Nikscorp/soap/internal/app/lazysoap.tvMetaClient -o ./mocks/tv_meta_client_mock.go -n TvMetaClientMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/Nikscorp/soap/internal/pkg/tvmeta"
	"github.com/gojuno/minimock/v3"
)

// TvMetaClientMock implements lazysoap.tvMetaClient
type TvMetaClientMock struct {
	t minimock.Tester

	funcSearchTVShows          func(ctx context.Context, query string) (tp1 *tvmeta.TVShows, err error)
	inspectFuncSearchTVShows   func(ctx context.Context, query string)
	afterSearchTVShowsCounter  uint64
	beforeSearchTVShowsCounter uint64
	SearchTVShowsMock          mTvMetaClientMockSearchTVShows

	funcTVShowEpisodesBySeason          func(ctx context.Context, id int, seasonNumber int) (tp1 *tvmeta.TVShowSeasonEpisodes, err error)
	inspectFuncTVShowEpisodesBySeason   func(ctx context.Context, id int, seasonNumber int)
	afterTVShowEpisodesBySeasonCounter  uint64
	beforeTVShowEpisodesBySeasonCounter uint64
	TVShowEpisodesBySeasonMock          mTvMetaClientMockTVShowEpisodesBySeason

	funcTvShowDetails          func(ctx context.Context, id int) (tp1 *tvmeta.TvShowDetails, err error)
	inspectFuncTvShowDetails   func(ctx context.Context, id int)
	afterTvShowDetailsCounter  uint64
	beforeTvShowDetailsCounter uint64
	TvShowDetailsMock          mTvMetaClientMockTvShowDetails
}

// NewTvMetaClientMock returns a mock for lazysoap.tvMetaClient
func NewTvMetaClientMock(t minimock.Tester) *TvMetaClientMock {
	m := &TvMetaClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SearchTVShowsMock = mTvMetaClientMockSearchTVShows{mock: m}
	m.SearchTVShowsMock.callArgs = []*TvMetaClientMockSearchTVShowsParams{}

	m.TVShowEpisodesBySeasonMock = mTvMetaClientMockTVShowEpisodesBySeason{mock: m}
	m.TVShowEpisodesBySeasonMock.callArgs = []*TvMetaClientMockTVShowEpisodesBySeasonParams{}

	m.TvShowDetailsMock = mTvMetaClientMockTvShowDetails{mock: m}
	m.TvShowDetailsMock.callArgs = []*TvMetaClientMockTvShowDetailsParams{}

	return m
}

type mTvMetaClientMockSearchTVShows struct {
	mock               *TvMetaClientMock
	defaultExpectation *TvMetaClientMockSearchTVShowsExpectation
	expectations       []*TvMetaClientMockSearchTVShowsExpectation

	callArgs []*TvMetaClientMockSearchTVShowsParams
	mutex    sync.RWMutex
}

// TvMetaClientMockSearchTVShowsExpectation specifies expectation struct of the tvMetaClient.SearchTVShows
type TvMetaClientMockSearchTVShowsExpectation struct {
	mock    *TvMetaClientMock
	params  *TvMetaClientMockSearchTVShowsParams
	results *TvMetaClientMockSearchTVShowsResults
	Counter uint64
}

// TvMetaClientMockSearchTVShowsParams contains parameters of the tvMetaClient.SearchTVShows
type TvMetaClientMockSearchTVShowsParams struct {
	ctx   context.Context
	query string
}

// TvMetaClientMockSearchTVShowsResults contains results of the tvMetaClient.SearchTVShows
type TvMetaClientMockSearchTVShowsResults struct {
	tp1 *tvmeta.TVShows
	err error
}

// Expect sets up expected params for tvMetaClient.SearchTVShows
func (mmSearchTVShows *mTvMetaClientMockSearchTVShows) Expect(ctx context.Context, query string) *mTvMetaClientMockSearchTVShows {
	if mmSearchTVShows.mock.funcSearchTVShows != nil {
		mmSearchTVShows.mock.t.Fatalf("TvMetaClientMock.SearchTVShows mock is already set by Set")
	}

	if mmSearchTVShows.defaultExpectation == nil {
		mmSearchTVShows.defaultExpectation = &TvMetaClientMockSearchTVShowsExpectation{}
	}

	mmSearchTVShows.defaultExpectation.params = &TvMetaClientMockSearchTVShowsParams{ctx, query}
	for _, e := range mmSearchTVShows.expectations {
		if minimock.Equal(e.params, mmSearchTVShows.defaultExpectation.params) {
			mmSearchTVShows.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSearchTVShows.defaultExpectation.params)
		}
	}

	return mmSearchTVShows
}

// Inspect accepts an inspector function that has same arguments as the tvMetaClient.SearchTVShows
func (mmSearchTVShows *mTvMetaClientMockSearchTVShows) Inspect(f func(ctx context.Context, query string)) *mTvMetaClientMockSearchTVShows {
	if mmSearchTVShows.mock.inspectFuncSearchTVShows != nil {
		mmSearchTVShows.mock.t.Fatalf("Inspect function is already set for TvMetaClientMock.SearchTVShows")
	}

	mmSearchTVShows.mock.inspectFuncSearchTVShows = f

	return mmSearchTVShows
}

// Return sets up results that will be returned by tvMetaClient.SearchTVShows
func (mmSearchTVShows *mTvMetaClientMockSearchTVShows) Return(tp1 *tvmeta.TVShows, err error) *TvMetaClientMock {
	if mmSearchTVShows.mock.funcSearchTVShows != nil {
		mmSearchTVShows.mock.t.Fatalf("TvMetaClientMock.SearchTVShows mock is already set by Set")
	}

	if mmSearchTVShows.defaultExpectation == nil {
		mmSearchTVShows.defaultExpectation = &TvMetaClientMockSearchTVShowsExpectation{mock: mmSearchTVShows.mock}
	}
	mmSearchTVShows.defaultExpectation.results = &TvMetaClientMockSearchTVShowsResults{tp1, err}
	return mmSearchTVShows.mock
}

// Set uses given function f to mock the tvMetaClient.SearchTVShows method
func (mmSearchTVShows *mTvMetaClientMockSearchTVShows) Set(f func(ctx context.Context, query string) (tp1 *tvmeta.TVShows, err error)) *TvMetaClientMock {
	if mmSearchTVShows.defaultExpectation != nil {
		mmSearchTVShows.mock.t.Fatalf("Default expectation is already set for the tvMetaClient.SearchTVShows method")
	}

	if len(mmSearchTVShows.expectations) > 0 {
		mmSearchTVShows.mock.t.Fatalf("Some expectations are already set for the tvMetaClient.SearchTVShows method")
	}

	mmSearchTVShows.mock.funcSearchTVShows = f
	return mmSearchTVShows.mock
}

// When sets expectation for the tvMetaClient.SearchTVShows which will trigger the result defined by the following
// Then helper
func (mmSearchTVShows *mTvMetaClientMockSearchTVShows) When(ctx context.Context, query string) *TvMetaClientMockSearchTVShowsExpectation {
	if mmSearchTVShows.mock.funcSearchTVShows != nil {
		mmSearchTVShows.mock.t.Fatalf("TvMetaClientMock.SearchTVShows mock is already set by Set")
	}

	expectation := &TvMetaClientMockSearchTVShowsExpectation{
		mock:   mmSearchTVShows.mock,
		params: &TvMetaClientMockSearchTVShowsParams{ctx, query},
	}
	mmSearchTVShows.expectations = append(mmSearchTVShows.expectations, expectation)
	return expectation
}

// Then sets up tvMetaClient.SearchTVShows return parameters for the expectation previously defined by the When method
func (e *TvMetaClientMockSearchTVShowsExpectation) Then(tp1 *tvmeta.TVShows, err error) *TvMetaClientMock {
	e.results = &TvMetaClientMockSearchTVShowsResults{tp1, err}
	return e.mock
}

// SearchTVShows implements lazysoap.tvMetaClient
func (mmSearchTVShows *TvMetaClientMock) SearchTVShows(ctx context.Context, query string) (tp1 *tvmeta.TVShows, err error) {
	mm_atomic.AddUint64(&mmSearchTVShows.beforeSearchTVShowsCounter, 1)
	defer mm_atomic.AddUint64(&mmSearchTVShows.afterSearchTVShowsCounter, 1)

	if mmSearchTVShows.inspectFuncSearchTVShows != nil {
		mmSearchTVShows.inspectFuncSearchTVShows(ctx, query)
	}

	mm_params := &TvMetaClientMockSearchTVShowsParams{ctx, query}

	// Record call args
	mmSearchTVShows.SearchTVShowsMock.mutex.Lock()
	mmSearchTVShows.SearchTVShowsMock.callArgs = append(mmSearchTVShows.SearchTVShowsMock.callArgs, mm_params)
	mmSearchTVShows.SearchTVShowsMock.mutex.Unlock()

	for _, e := range mmSearchTVShows.SearchTVShowsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.tp1, e.results.err
		}
	}

	if mmSearchTVShows.SearchTVShowsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSearchTVShows.SearchTVShowsMock.defaultExpectation.Counter, 1)
		mm_want := mmSearchTVShows.SearchTVShowsMock.defaultExpectation.params
		mm_got := TvMetaClientMockSearchTVShowsParams{ctx, query}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSearchTVShows.t.Errorf("TvMetaClientMock.SearchTVShows got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSearchTVShows.SearchTVShowsMock.defaultExpectation.results
		if mm_results == nil {
			mmSearchTVShows.t.Fatal("No results are set for the TvMetaClientMock.SearchTVShows")
		}
		return (*mm_results).tp1, (*mm_results).err
	}
	if mmSearchTVShows.funcSearchTVShows != nil {
		return mmSearchTVShows.funcSearchTVShows(ctx, query)
	}
	mmSearchTVShows.t.Fatalf("Unexpected call to TvMetaClientMock.SearchTVShows. %v %v", ctx, query)
	return
}

// SearchTVShowsAfterCounter returns a count of finished TvMetaClientMock.SearchTVShows invocations
func (mmSearchTVShows *TvMetaClientMock) SearchTVShowsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSearchTVShows.afterSearchTVShowsCounter)
}

// SearchTVShowsBeforeCounter returns a count of TvMetaClientMock.SearchTVShows invocations
func (mmSearchTVShows *TvMetaClientMock) SearchTVShowsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSearchTVShows.beforeSearchTVShowsCounter)
}

// Calls returns a list of arguments used in each call to TvMetaClientMock.SearchTVShows.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSearchTVShows *mTvMetaClientMockSearchTVShows) Calls() []*TvMetaClientMockSearchTVShowsParams {
	mmSearchTVShows.mutex.RLock()

	argCopy := make([]*TvMetaClientMockSearchTVShowsParams, len(mmSearchTVShows.callArgs))
	copy(argCopy, mmSearchTVShows.callArgs)

	mmSearchTVShows.mutex.RUnlock()

	return argCopy
}

// MinimockSearchTVShowsDone returns true if the count of the SearchTVShows invocations corresponds
// the number of defined expectations
func (m *TvMetaClientMock) MinimockSearchTVShowsDone() bool {
	for _, e := range m.SearchTVShowsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SearchTVShowsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSearchTVShowsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSearchTVShows != nil && mm_atomic.LoadUint64(&m.afterSearchTVShowsCounter) < 1 {
		return false
	}
	return true
}

// MinimockSearchTVShowsInspect logs each unmet expectation
func (m *TvMetaClientMock) MinimockSearchTVShowsInspect() {
	for _, e := range m.SearchTVShowsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TvMetaClientMock.SearchTVShows with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SearchTVShowsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSearchTVShowsCounter) < 1 {
		if m.SearchTVShowsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TvMetaClientMock.SearchTVShows")
		} else {
			m.t.Errorf("Expected call to TvMetaClientMock.SearchTVShows with params: %#v", *m.SearchTVShowsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSearchTVShows != nil && mm_atomic.LoadUint64(&m.afterSearchTVShowsCounter) < 1 {
		m.t.Error("Expected call to TvMetaClientMock.SearchTVShows")
	}
}

type mTvMetaClientMockTVShowEpisodesBySeason struct {
	mock               *TvMetaClientMock
	defaultExpectation *TvMetaClientMockTVShowEpisodesBySeasonExpectation
	expectations       []*TvMetaClientMockTVShowEpisodesBySeasonExpectation

	callArgs []*TvMetaClientMockTVShowEpisodesBySeasonParams
	mutex    sync.RWMutex
}

// TvMetaClientMockTVShowEpisodesBySeasonExpectation specifies expectation struct of the tvMetaClient.TVShowEpisodesBySeason
type TvMetaClientMockTVShowEpisodesBySeasonExpectation struct {
	mock    *TvMetaClientMock
	params  *TvMetaClientMockTVShowEpisodesBySeasonParams
	results *TvMetaClientMockTVShowEpisodesBySeasonResults
	Counter uint64
}

// TvMetaClientMockTVShowEpisodesBySeasonParams contains parameters of the tvMetaClient.TVShowEpisodesBySeason
type TvMetaClientMockTVShowEpisodesBySeasonParams struct {
	ctx          context.Context
	id           int
	seasonNumber int
}

// TvMetaClientMockTVShowEpisodesBySeasonResults contains results of the tvMetaClient.TVShowEpisodesBySeason
type TvMetaClientMockTVShowEpisodesBySeasonResults struct {
	tp1 *tvmeta.TVShowSeasonEpisodes
	err error
}

// Expect sets up expected params for tvMetaClient.TVShowEpisodesBySeason
func (mmTVShowEpisodesBySeason *mTvMetaClientMockTVShowEpisodesBySeason) Expect(ctx context.Context, id int, seasonNumber int) *mTvMetaClientMockTVShowEpisodesBySeason {
	if mmTVShowEpisodesBySeason.mock.funcTVShowEpisodesBySeason != nil {
		mmTVShowEpisodesBySeason.mock.t.Fatalf("TvMetaClientMock.TVShowEpisodesBySeason mock is already set by Set")
	}

	if mmTVShowEpisodesBySeason.defaultExpectation == nil {
		mmTVShowEpisodesBySeason.defaultExpectation = &TvMetaClientMockTVShowEpisodesBySeasonExpectation{}
	}

	mmTVShowEpisodesBySeason.defaultExpectation.params = &TvMetaClientMockTVShowEpisodesBySeasonParams{ctx, id, seasonNumber}
	for _, e := range mmTVShowEpisodesBySeason.expectations {
		if minimock.Equal(e.params, mmTVShowEpisodesBySeason.defaultExpectation.params) {
			mmTVShowEpisodesBySeason.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTVShowEpisodesBySeason.defaultExpectation.params)
		}
	}

	return mmTVShowEpisodesBySeason
}

// Inspect accepts an inspector function that has same arguments as the tvMetaClient.TVShowEpisodesBySeason
func (mmTVShowEpisodesBySeason *mTvMetaClientMockTVShowEpisodesBySeason) Inspect(f func(ctx context.Context, id int, seasonNumber int)) *mTvMetaClientMockTVShowEpisodesBySeason {
	if mmTVShowEpisodesBySeason.mock.inspectFuncTVShowEpisodesBySeason != nil {
		mmTVShowEpisodesBySeason.mock.t.Fatalf("Inspect function is already set for TvMetaClientMock.TVShowEpisodesBySeason")
	}

	mmTVShowEpisodesBySeason.mock.inspectFuncTVShowEpisodesBySeason = f

	return mmTVShowEpisodesBySeason
}

// Return sets up results that will be returned by tvMetaClient.TVShowEpisodesBySeason
func (mmTVShowEpisodesBySeason *mTvMetaClientMockTVShowEpisodesBySeason) Return(tp1 *tvmeta.TVShowSeasonEpisodes, err error) *TvMetaClientMock {
	if mmTVShowEpisodesBySeason.mock.funcTVShowEpisodesBySeason != nil {
		mmTVShowEpisodesBySeason.mock.t.Fatalf("TvMetaClientMock.TVShowEpisodesBySeason mock is already set by Set")
	}

	if mmTVShowEpisodesBySeason.defaultExpectation == nil {
		mmTVShowEpisodesBySeason.defaultExpectation = &TvMetaClientMockTVShowEpisodesBySeasonExpectation{mock: mmTVShowEpisodesBySeason.mock}
	}
	mmTVShowEpisodesBySeason.defaultExpectation.results = &TvMetaClientMockTVShowEpisodesBySeasonResults{tp1, err}
	return mmTVShowEpisodesBySeason.mock
}

// Set uses given function f to mock the tvMetaClient.TVShowEpisodesBySeason method
func (mmTVShowEpisodesBySeason *mTvMetaClientMockTVShowEpisodesBySeason) Set(f func(ctx context.Context, id int, seasonNumber int) (tp1 *tvmeta.TVShowSeasonEpisodes, err error)) *TvMetaClientMock {
	if mmTVShowEpisodesBySeason.defaultExpectation != nil {
		mmTVShowEpisodesBySeason.mock.t.Fatalf("Default expectation is already set for the tvMetaClient.TVShowEpisodesBySeason method")
	}

	if len(mmTVShowEpisodesBySeason.expectations) > 0 {
		mmTVShowEpisodesBySeason.mock.t.Fatalf("Some expectations are already set for the tvMetaClient.TVShowEpisodesBySeason method")
	}

	mmTVShowEpisodesBySeason.mock.funcTVShowEpisodesBySeason = f
	return mmTVShowEpisodesBySeason.mock
}

// When sets expectation for the tvMetaClient.TVShowEpisodesBySeason which will trigger the result defined by the following
// Then helper
func (mmTVShowEpisodesBySeason *mTvMetaClientMockTVShowEpisodesBySeason) When(ctx context.Context, id int, seasonNumber int) *TvMetaClientMockTVShowEpisodesBySeasonExpectation {
	if mmTVShowEpisodesBySeason.mock.funcTVShowEpisodesBySeason != nil {
		mmTVShowEpisodesBySeason.mock.t.Fatalf("TvMetaClientMock.TVShowEpisodesBySeason mock is already set by Set")
	}

	expectation := &TvMetaClientMockTVShowEpisodesBySeasonExpectation{
		mock:   mmTVShowEpisodesBySeason.mock,
		params: &TvMetaClientMockTVShowEpisodesBySeasonParams{ctx, id, seasonNumber},
	}
	mmTVShowEpisodesBySeason.expectations = append(mmTVShowEpisodesBySeason.expectations, expectation)
	return expectation
}

// Then sets up tvMetaClient.TVShowEpisodesBySeason return parameters for the expectation previously defined by the When method
func (e *TvMetaClientMockTVShowEpisodesBySeasonExpectation) Then(tp1 *tvmeta.TVShowSeasonEpisodes, err error) *TvMetaClientMock {
	e.results = &TvMetaClientMockTVShowEpisodesBySeasonResults{tp1, err}
	return e.mock
}

// TVShowEpisodesBySeason implements lazysoap.tvMetaClient
func (mmTVShowEpisodesBySeason *TvMetaClientMock) TVShowEpisodesBySeason(ctx context.Context, id int, seasonNumber int) (tp1 *tvmeta.TVShowSeasonEpisodes, err error) {
	mm_atomic.AddUint64(&mmTVShowEpisodesBySeason.beforeTVShowEpisodesBySeasonCounter, 1)
	defer mm_atomic.AddUint64(&mmTVShowEpisodesBySeason.afterTVShowEpisodesBySeasonCounter, 1)

	if mmTVShowEpisodesBySeason.inspectFuncTVShowEpisodesBySeason != nil {
		mmTVShowEpisodesBySeason.inspectFuncTVShowEpisodesBySeason(ctx, id, seasonNumber)
	}

	mm_params := &TvMetaClientMockTVShowEpisodesBySeasonParams{ctx, id, seasonNumber}

	// Record call args
	mmTVShowEpisodesBySeason.TVShowEpisodesBySeasonMock.mutex.Lock()
	mmTVShowEpisodesBySeason.TVShowEpisodesBySeasonMock.callArgs = append(mmTVShowEpisodesBySeason.TVShowEpisodesBySeasonMock.callArgs, mm_params)
	mmTVShowEpisodesBySeason.TVShowEpisodesBySeasonMock.mutex.Unlock()

	for _, e := range mmTVShowEpisodesBySeason.TVShowEpisodesBySeasonMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.tp1, e.results.err
		}
	}

	if mmTVShowEpisodesBySeason.TVShowEpisodesBySeasonMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTVShowEpisodesBySeason.TVShowEpisodesBySeasonMock.defaultExpectation.Counter, 1)
		mm_want := mmTVShowEpisodesBySeason.TVShowEpisodesBySeasonMock.defaultExpectation.params
		mm_got := TvMetaClientMockTVShowEpisodesBySeasonParams{ctx, id, seasonNumber}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTVShowEpisodesBySeason.t.Errorf("TvMetaClientMock.TVShowEpisodesBySeason got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTVShowEpisodesBySeason.TVShowEpisodesBySeasonMock.defaultExpectation.results
		if mm_results == nil {
			mmTVShowEpisodesBySeason.t.Fatal("No results are set for the TvMetaClientMock.TVShowEpisodesBySeason")
		}
		return (*mm_results).tp1, (*mm_results).err
	}
	if mmTVShowEpisodesBySeason.funcTVShowEpisodesBySeason != nil {
		return mmTVShowEpisodesBySeason.funcTVShowEpisodesBySeason(ctx, id, seasonNumber)
	}
	mmTVShowEpisodesBySeason.t.Fatalf("Unexpected call to TvMetaClientMock.TVShowEpisodesBySeason. %v %v %v", ctx, id, seasonNumber)
	return
}

// TVShowEpisodesBySeasonAfterCounter returns a count of finished TvMetaClientMock.TVShowEpisodesBySeason invocations
func (mmTVShowEpisodesBySeason *TvMetaClientMock) TVShowEpisodesBySeasonAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTVShowEpisodesBySeason.afterTVShowEpisodesBySeasonCounter)
}

// TVShowEpisodesBySeasonBeforeCounter returns a count of TvMetaClientMock.TVShowEpisodesBySeason invocations
func (mmTVShowEpisodesBySeason *TvMetaClientMock) TVShowEpisodesBySeasonBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTVShowEpisodesBySeason.beforeTVShowEpisodesBySeasonCounter)
}

// Calls returns a list of arguments used in each call to TvMetaClientMock.TVShowEpisodesBySeason.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTVShowEpisodesBySeason *mTvMetaClientMockTVShowEpisodesBySeason) Calls() []*TvMetaClientMockTVShowEpisodesBySeasonParams {
	mmTVShowEpisodesBySeason.mutex.RLock()

	argCopy := make([]*TvMetaClientMockTVShowEpisodesBySeasonParams, len(mmTVShowEpisodesBySeason.callArgs))
	copy(argCopy, mmTVShowEpisodesBySeason.callArgs)

	mmTVShowEpisodesBySeason.mutex.RUnlock()

	return argCopy
}

// MinimockTVShowEpisodesBySeasonDone returns true if the count of the TVShowEpisodesBySeason invocations corresponds
// the number of defined expectations
func (m *TvMetaClientMock) MinimockTVShowEpisodesBySeasonDone() bool {
	for _, e := range m.TVShowEpisodesBySeasonMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TVShowEpisodesBySeasonMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTVShowEpisodesBySeasonCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTVShowEpisodesBySeason != nil && mm_atomic.LoadUint64(&m.afterTVShowEpisodesBySeasonCounter) < 1 {
		return false
	}
	return true
}

// MinimockTVShowEpisodesBySeasonInspect logs each unmet expectation
func (m *TvMetaClientMock) MinimockTVShowEpisodesBySeasonInspect() {
	for _, e := range m.TVShowEpisodesBySeasonMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TvMetaClientMock.TVShowEpisodesBySeason with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TVShowEpisodesBySeasonMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTVShowEpisodesBySeasonCounter) < 1 {
		if m.TVShowEpisodesBySeasonMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TvMetaClientMock.TVShowEpisodesBySeason")
		} else {
			m.t.Errorf("Expected call to TvMetaClientMock.TVShowEpisodesBySeason with params: %#v", *m.TVShowEpisodesBySeasonMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTVShowEpisodesBySeason != nil && mm_atomic.LoadUint64(&m.afterTVShowEpisodesBySeasonCounter) < 1 {
		m.t.Error("Expected call to TvMetaClientMock.TVShowEpisodesBySeason")
	}
}

type mTvMetaClientMockTvShowDetails struct {
	mock               *TvMetaClientMock
	defaultExpectation *TvMetaClientMockTvShowDetailsExpectation
	expectations       []*TvMetaClientMockTvShowDetailsExpectation

	callArgs []*TvMetaClientMockTvShowDetailsParams
	mutex    sync.RWMutex
}

// TvMetaClientMockTvShowDetailsExpectation specifies expectation struct of the tvMetaClient.TvShowDetails
type TvMetaClientMockTvShowDetailsExpectation struct {
	mock    *TvMetaClientMock
	params  *TvMetaClientMockTvShowDetailsParams
	results *TvMetaClientMockTvShowDetailsResults
	Counter uint64
}

// TvMetaClientMockTvShowDetailsParams contains parameters of the tvMetaClient.TvShowDetails
type TvMetaClientMockTvShowDetailsParams struct {
	ctx context.Context
	id  int
}

// TvMetaClientMockTvShowDetailsResults contains results of the tvMetaClient.TvShowDetails
type TvMetaClientMockTvShowDetailsResults struct {
	tp1 *tvmeta.TvShowDetails
	err error
}

// Expect sets up expected params for tvMetaClient.TvShowDetails
func (mmTvShowDetails *mTvMetaClientMockTvShowDetails) Expect(ctx context.Context, id int) *mTvMetaClientMockTvShowDetails {
	if mmTvShowDetails.mock.funcTvShowDetails != nil {
		mmTvShowDetails.mock.t.Fatalf("TvMetaClientMock.TvShowDetails mock is already set by Set")
	}

	if mmTvShowDetails.defaultExpectation == nil {
		mmTvShowDetails.defaultExpectation = &TvMetaClientMockTvShowDetailsExpectation{}
	}

	mmTvShowDetails.defaultExpectation.params = &TvMetaClientMockTvShowDetailsParams{ctx, id}
	for _, e := range mmTvShowDetails.expectations {
		if minimock.Equal(e.params, mmTvShowDetails.defaultExpectation.params) {
			mmTvShowDetails.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTvShowDetails.defaultExpectation.params)
		}
	}

	return mmTvShowDetails
}

// Inspect accepts an inspector function that has same arguments as the tvMetaClient.TvShowDetails
func (mmTvShowDetails *mTvMetaClientMockTvShowDetails) Inspect(f func(ctx context.Context, id int)) *mTvMetaClientMockTvShowDetails {
	if mmTvShowDetails.mock.inspectFuncTvShowDetails != nil {
		mmTvShowDetails.mock.t.Fatalf("Inspect function is already set for TvMetaClientMock.TvShowDetails")
	}

	mmTvShowDetails.mock.inspectFuncTvShowDetails = f

	return mmTvShowDetails
}

// Return sets up results that will be returned by tvMetaClient.TvShowDetails
func (mmTvShowDetails *mTvMetaClientMockTvShowDetails) Return(tp1 *tvmeta.TvShowDetails, err error) *TvMetaClientMock {
	if mmTvShowDetails.mock.funcTvShowDetails != nil {
		mmTvShowDetails.mock.t.Fatalf("TvMetaClientMock.TvShowDetails mock is already set by Set")
	}

	if mmTvShowDetails.defaultExpectation == nil {
		mmTvShowDetails.defaultExpectation = &TvMetaClientMockTvShowDetailsExpectation{mock: mmTvShowDetails.mock}
	}
	mmTvShowDetails.defaultExpectation.results = &TvMetaClientMockTvShowDetailsResults{tp1, err}
	return mmTvShowDetails.mock
}

// Set uses given function f to mock the tvMetaClient.TvShowDetails method
func (mmTvShowDetails *mTvMetaClientMockTvShowDetails) Set(f func(ctx context.Context, id int) (tp1 *tvmeta.TvShowDetails, err error)) *TvMetaClientMock {
	if mmTvShowDetails.defaultExpectation != nil {
		mmTvShowDetails.mock.t.Fatalf("Default expectation is already set for the tvMetaClient.TvShowDetails method")
	}

	if len(mmTvShowDetails.expectations) > 0 {
		mmTvShowDetails.mock.t.Fatalf("Some expectations are already set for the tvMetaClient.TvShowDetails method")
	}

	mmTvShowDetails.mock.funcTvShowDetails = f
	return mmTvShowDetails.mock
}

// When sets expectation for the tvMetaClient.TvShowDetails which will trigger the result defined by the following
// Then helper
func (mmTvShowDetails *mTvMetaClientMockTvShowDetails) When(ctx context.Context, id int) *TvMetaClientMockTvShowDetailsExpectation {
	if mmTvShowDetails.mock.funcTvShowDetails != nil {
		mmTvShowDetails.mock.t.Fatalf("TvMetaClientMock.TvShowDetails mock is already set by Set")
	}

	expectation := &TvMetaClientMockTvShowDetailsExpectation{
		mock:   mmTvShowDetails.mock,
		params: &TvMetaClientMockTvShowDetailsParams{ctx, id},
	}
	mmTvShowDetails.expectations = append(mmTvShowDetails.expectations, expectation)
	return expectation
}

// Then sets up tvMetaClient.TvShowDetails return parameters for the expectation previously defined by the When method
func (e *TvMetaClientMockTvShowDetailsExpectation) Then(tp1 *tvmeta.TvShowDetails, err error) *TvMetaClientMock {
	e.results = &TvMetaClientMockTvShowDetailsResults{tp1, err}
	return e.mock
}

// TvShowDetails implements lazysoap.tvMetaClient
func (mmTvShowDetails *TvMetaClientMock) TvShowDetails(ctx context.Context, id int) (tp1 *tvmeta.TvShowDetails, err error) {
	mm_atomic.AddUint64(&mmTvShowDetails.beforeTvShowDetailsCounter, 1)
	defer mm_atomic.AddUint64(&mmTvShowDetails.afterTvShowDetailsCounter, 1)

	if mmTvShowDetails.inspectFuncTvShowDetails != nil {
		mmTvShowDetails.inspectFuncTvShowDetails(ctx, id)
	}

	mm_params := &TvMetaClientMockTvShowDetailsParams{ctx, id}

	// Record call args
	mmTvShowDetails.TvShowDetailsMock.mutex.Lock()
	mmTvShowDetails.TvShowDetailsMock.callArgs = append(mmTvShowDetails.TvShowDetailsMock.callArgs, mm_params)
	mmTvShowDetails.TvShowDetailsMock.mutex.Unlock()

	for _, e := range mmTvShowDetails.TvShowDetailsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.tp1, e.results.err
		}
	}

	if mmTvShowDetails.TvShowDetailsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTvShowDetails.TvShowDetailsMock.defaultExpectation.Counter, 1)
		mm_want := mmTvShowDetails.TvShowDetailsMock.defaultExpectation.params
		mm_got := TvMetaClientMockTvShowDetailsParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTvShowDetails.t.Errorf("TvMetaClientMock.TvShowDetails got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTvShowDetails.TvShowDetailsMock.defaultExpectation.results
		if mm_results == nil {
			mmTvShowDetails.t.Fatal("No results are set for the TvMetaClientMock.TvShowDetails")
		}
		return (*mm_results).tp1, (*mm_results).err
	}
	if mmTvShowDetails.funcTvShowDetails != nil {
		return mmTvShowDetails.funcTvShowDetails(ctx, id)
	}
	mmTvShowDetails.t.Fatalf("Unexpected call to TvMetaClientMock.TvShowDetails. %v %v", ctx, id)
	return
}

// TvShowDetailsAfterCounter returns a count of finished TvMetaClientMock.TvShowDetails invocations
func (mmTvShowDetails *TvMetaClientMock) TvShowDetailsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTvShowDetails.afterTvShowDetailsCounter)
}

// TvShowDetailsBeforeCounter returns a count of TvMetaClientMock.TvShowDetails invocations
func (mmTvShowDetails *TvMetaClientMock) TvShowDetailsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTvShowDetails.beforeTvShowDetailsCounter)
}

// Calls returns a list of arguments used in each call to TvMetaClientMock.TvShowDetails.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTvShowDetails *mTvMetaClientMockTvShowDetails) Calls() []*TvMetaClientMockTvShowDetailsParams {
	mmTvShowDetails.mutex.RLock()

	argCopy := make([]*TvMetaClientMockTvShowDetailsParams, len(mmTvShowDetails.callArgs))
	copy(argCopy, mmTvShowDetails.callArgs)

	mmTvShowDetails.mutex.RUnlock()

	return argCopy
}

// MinimockTvShowDetailsDone returns true if the count of the TvShowDetails invocations corresponds
// the number of defined expectations
func (m *TvMetaClientMock) MinimockTvShowDetailsDone() bool {
	for _, e := range m.TvShowDetailsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TvShowDetailsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTvShowDetailsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTvShowDetails != nil && mm_atomic.LoadUint64(&m.afterTvShowDetailsCounter) < 1 {
		return false
	}
	return true
}

// MinimockTvShowDetailsInspect logs each unmet expectation
func (m *TvMetaClientMock) MinimockTvShowDetailsInspect() {
	for _, e := range m.TvShowDetailsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TvMetaClientMock.TvShowDetails with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TvShowDetailsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTvShowDetailsCounter) < 1 {
		if m.TvShowDetailsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TvMetaClientMock.TvShowDetails")
		} else {
			m.t.Errorf("Expected call to TvMetaClientMock.TvShowDetails with params: %#v", *m.TvShowDetailsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTvShowDetails != nil && mm_atomic.LoadUint64(&m.afterTvShowDetailsCounter) < 1 {
		m.t.Error("Expected call to TvMetaClientMock.TvShowDetails")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TvMetaClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockSearchTVShowsInspect()

		m.MinimockTVShowEpisodesBySeasonInspect()

		m.MinimockTvShowDetailsInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TvMetaClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TvMetaClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSearchTVShowsDone() &&
		m.MinimockTVShowEpisodesBySeasonDone() &&
		m.MinimockTvShowDetailsDone()
}
